<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Count Enforcer - Discord Bot</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #69398e, #4a2a63);
            color: #ffffff;
        }
        .stats-bar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            padding: 1rem;
            display: flex;
            justify-content: center;
            gap: 2rem;
            font-size: 0.9rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .stat-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.25rem;
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        .stat-item:hover {
            transform: translateY(-2px);
        }
        .stat-item.clickable {
            cursor: pointer;
        }
        .stat-value {
            font-size: 1.2rem;
            font-weight: bold;
            color: #ffffff;
        }
        .stat-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .container {
            display: flex;
            gap: 2rem;
            padding: 2rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 1000px;
            width: 90%;
            margin-top: 4rem;
        }
        .main-content {
            flex: 1;
            text-align: left;
        }
        .features {
            flex: 1;
            text-align: left;
            padding-left: 2rem;
            border-left: 1px solid rgba(255, 255, 255, 0.2);
        }
        h1 {
            margin-bottom: 1.5rem;
            font-size: 2.5rem;
        }
        h2 {
            font-size: 1.8rem;
            margin-bottom: 1rem;
            color: #ffffff;
        }
        .add-bot-button {
            display: inline-block;
            padding: 1rem 2rem;
            background-color: #69398e;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 1.2rem;
            transition: background-color 0.3s ease;
            margin-top: 1rem;
        }
        .add-bot-button:hover {
            background-color: #4a2a63;
        }
        .description {
            margin: 1.5rem 0;
            font-size: 1.1rem;
            line-height: 1.6;
        }
        .feature-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .feature-item {
            margin-bottom: 1.5rem;
            padding-left: 1.5rem;
            position: relative;
        }
        .feature-item:before {
            content: "â€¢";
            position: absolute;
            left: 0;
            color: #69398e;
            font-size: 1.5rem;
        }
        .feature-title {
            font-weight: bold;
            margin-bottom: 0.5rem;
            color: #ffffff;
        }
        .feature-description {
            font-size: 0.95rem;
            line-height: 1.5;
            color: rgba(255, 255, 255, 0.9);
        }
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                gap: 1rem;
            }
            .features {
                padding-left: 0;
                border-left: none;
                border-top: 1px solid rgba(255, 255, 255, 0.2);
                padding-top: 1rem;
            }
        }
        .footer {
            text-align: center;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.7);
            margin-top: 1rem;
        }
        .footer a {
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            transition: color 0.3s ease;
            margin: 0 1rem;
        }
        .footer a:hover {
            color: #ffffff;
        }
        .vibes-disclaimer {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
            font-style: italic;
            text-align: right;
            max-width: 200px;
            line-height: 1.4;
        }
        .vibes-disclaimer strong {
            color: rgba(255, 255, 255, 0.8);
        }
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(5px);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background: rgba(74, 42, 99, 0.95);
            padding: 2rem;
            border-radius: 10px;
            width: 80%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
        }
        .modal-close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 1.5rem;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            transition: color 0.2s ease;
        }
        .modal-close:hover {
            color: #ffffff;
        }
        .servers-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }
        .servers-table th,
        .servers-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .servers-table th {
            color: rgba(255, 255, 255, 0.9);
            font-weight: bold;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
        }
        .servers-table tr:hover {
            background: rgba(255, 255, 255, 0.05);
        }
    </style>
</head>
<body>
    <div class="stats-bar">
        <div class="stat-item clickable" id="servers-stat">
            <div class="stat-value"><%= stats.serverCount %></div>
            <div class="stat-label">Servers</div>
        </div>
        <div class="stat-item">
            <div class="stat-value"><%= stats.userCount %></div>
            <div class="stat-label">Users</div>
        </div>
        <div class="stat-item">
            <div class="stat-value"><%= stats.highestCount %></div>
            <div class="stat-label">Highest Count</div>
        </div>
        <div class="stat-item">
            <div class="stat-value"><%= stats.highestStreak %></div>
            <div class="stat-label">Best Streak</div>
        </div>
    </div>
    <div class="container">
        <div class="main-content">
            <h1>Count Enforcer</h1>
            <p class="description">
                The ultimate counting game bot for Discord. Keep your server counting, track scores, and ensure fair play - all with a single click.
            </p>
            <a href="<%= inviteUrl %>" class="add-bot-button" target="_blank">
                Add to Discord
            </a>
        </div>
        <div class="features">
            <h2>Features</h2>
            <ul class="feature-list">
                <li class="feature-item">
                    <div class="feature-title">Score Tracking</div>
                    <div class="feature-description">Keep track of your server's current count, highest count, and individual user statistics.</div>
                </li>
                <li class="feature-item">
                    <div class="feature-title">Role Management</div>
                    <div class="feature-description">Automatic role assignment for participants and easy management of counting permissions.</div>
                </li>
                <li class="feature-item">
                    <div class="feature-title">Multi-language Support</div>
                    <div class="feature-description">Choose your preferred language for bot interactions and commands.</div>
                </li>
                <li class="feature-item">
                    <div class="feature-title">Fair Play Enforcement</div>
                    <div class="feature-description">Built-in rules to prevent double-counting and ensure everyone gets a fair chance to participate.</div>
                </li>
            </ul>
        </div>
    </div>
    <div class="footer">
        <a href="https://github.com/jasonhazel/count-enforcer" target="_blank">source</a>
        <a href="https://github.com/jasonhazel" target="_blank">jasonhazel</a>
    </div>
    <div class="vibes-disclaimer">
        <strong>Disclaimer:</strong> This bot was 99.7% coded with vibes. The remaining 0.3% was pure chaos.
    </div>

    <!-- Server Stats Modal -->
    <div class="modal" id="servers-modal">
        <div class="modal-content">
            <span class="modal-close">&times;</span>
            <h2>Server Statistics</h2>
            <table class="servers-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Current</th>
                        <th>Highest</th>
                        <th>Saves</th>
                    </tr>
                </thead>
                <tbody>
                    <% servers.forEach(function(server) { %>
                        <tr>
                            <td><%= server.name %></td>
                            <td><%= server.currentCount %></td>
                            <td><%= server.highestCount %></td>
                            <td><%= server.saves %></td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Modal functionality
        const modal = document.getElementById('servers-modal');
        const serversStat = document.getElementById('servers-stat');
        const closeBtn = document.querySelector('.modal-close');

        serversStat.addEventListener('click', () => {
            modal.style.display = 'flex';
        });

        closeBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        window.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });

        // WebSocket connection
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const ws = new WebSocket(`${protocol}//${window.location.host}`);

        // Handle WebSocket messages
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            
            // Update stats in the stats bar
            document.querySelector('#servers-stat .stat-value').textContent = data.stats.serverCount;
            document.querySelector('.stat-item:nth-child(2) .stat-value').textContent = data.stats.userCount;
            document.querySelector('.stat-item:nth-child(3) .stat-value').textContent = data.stats.highestCount;
            document.querySelector('.stat-item:nth-child(4) .stat-value').textContent = data.stats.highestStreak;

            // Update server table if modal is open
            if (modal.style.display === 'flex') {
                const tbody = document.querySelector('.servers-table tbody');
                tbody.innerHTML = data.servers.map(server => `
                    <tr>
                        <td>${server.name}</td>
                        <td>${server.currentCount}</td>
                        <td>${server.highestCount}</td>
                        <td>${server.saves}</td>
                    </tr>
                `).join('');
            }
        };

        // Handle WebSocket connection errors
        ws.onerror = (error) => {
            console.error('WebSocket error:', error);
        };

        // Handle WebSocket reconnection
        ws.onclose = () => {
            console.log('WebSocket connection closed. Attempting to reconnect...');
            setTimeout(() => {
                window.location.reload();
            }, 5000);
        };
    </script>
</body>
</html> 