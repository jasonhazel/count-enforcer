{
  "name": "Development Guidelines",
  "description": "Core development rules for the project",
  "rules": [
    {
      "name": "git-workflow",
      "description": "Git workflow and branching strategy",
      "rules": [
        "Always create a new branch for code changes",
        "Branch names should follow the pattern: feature/, bugfix/, or hotfix/ followed by a descriptive name",
        "Commit messages should be clear and descriptive, following conventional commits format",
        "Before merging, ensure all tests pass and code is reviewed",
        "Keep commits atomic and focused on a single change"
      ]
    },
    {
      "name": "docker-considerations",
      "description": "Docker-specific development rules",
      "rules": [
        "Always test changes in the Docker environment before committing",
        "Update Dockerfile and docker-compose.yml if adding new dependencies",
        "Ensure .dockerignore is properly configured to exclude unnecessary files",
        "Keep Docker images optimized and minimal",
        "Document any changes to Docker configuration in commit messages"
      ]
    },
    {
      "name": "code-quality",
      "description": "Code quality and consistency rules",
      "rules": [
        "Follow existing code style and formatting",
        "Write tests for new features and bug fixes",
        "Update documentation when changing functionality",
        "Keep functions small and focused",
        "Use meaningful variable and function names",
        "Maintain minimum test coverage of 80% for all new code"
      ]
    },
    {
      "name": "testing",
      "description": "Testing requirements and standards",
      "rules": [
        "Maintain minimum test coverage of 80% across the codebase",
        "Write unit tests for all new functions and methods",
        "Include integration tests for API endpoints and database operations",
        "Test both success and error cases",
        "Mock external dependencies in unit tests",
        "Run full test suite before committing changes",
        "Document test coverage reports in pull requests"
      ]
    },
    {
      "name": "security",
      "description": "Security best practices",
      "rules": [
        "Never commit sensitive data or credentials",
        "Use environment variables for configuration",
        "Keep dependencies updated and secure",
        "Follow security best practices for Docker configurations"
      ]
    },
    {
      "name": "vue-development",
      "description": "Vue.js development standards",
      "rules": [
        "Use Vue.js in Options API mode (not Composition API)",
        "Follow Vue.js style guide for component naming and structure",
        "Use PascalCase for component names",
        "Use kebab-case for custom event names",
        "Keep components focused and single-responsibility",
        "Use Vuetify components for UI elements when available",
        "Follow Vuetify's design system and spacing guidelines",
        "Implement responsive design using Vuetify's grid system",
        "Use Vuetify's built-in theming system for consistent styling",
        "Document component props, events, and slots"
      ]
    },
    {
      "name": "javascript-standards",
      "description": "JavaScript coding standards",
      "rules": [
        "Use ES6+ features appropriately",
        "Follow consistent naming conventions (camelCase for variables/functions)",
        "Use async/await for asynchronous operations",
        "Implement proper error handling",
        "Use destructuring and spread operators where appropriate",
        "Keep functions pure when possible",
        "Use TypeScript for type safety where applicable",
        "Document complex functions with JSDoc comments"
      ]
    }
  ]
} 